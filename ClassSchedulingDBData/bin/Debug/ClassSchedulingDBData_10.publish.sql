/*
Deployment script for ClassSchedulingDBData

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ClassSchedulingDBData"
:setvar DefaultFilePrefix "ClassSchedulingDBData"
:setvar DefaultDataPath "C:\Users\David Nguyen\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\David Nguyen\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[apiEvents]...';


GO
CREATE TABLE [dbo].[apiEvents] (
    [Id]              INT           IDENTITY (1, 1) NOT NULL,
    [eventData]       VARCHAR (MAX) NOT NULL,
    [eventUUID]       VARCHAR (256) NOT NULL,
    [eventAuthorHash] VARCHAR (512) NOT NULL,
    [institutonID]    VARCHAR (64)  NOT NULL,
    [year]            INT           NOT NULL,
    [quarter]         INT           NOT NULL,
    [building]        VARCHAR (64)  NOT NULL,
    [room]            VARCHAR (64)  NOT NULL,
    [coursePrefix]    VARCHAR (24)  NOT NULL,
    [deliveryType]    VARCHAR (24)  NULL,
    [startDate]       DATE          NULL,
    [endDate]         DATE          NULL,
    [courseNumber]    VARCHAR (12)  NULL,
    [Section]         VARCHAR (12)  NULL,
    [Component]       VARCHAR (64)  NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([eventUUID] ASC)
);


GO
PRINT N'Creating Table [dbo].[calendarBookBackUps]...';


GO
CREATE TABLE [dbo].[calendarBookBackUps] (
    [Id]              INT           IDENTITY (1, 1) NOT NULL,
    [institutonID]    VARCHAR (64)  NOT NULL,
    [completeBooking] VARCHAR (MAX) NOT NULL,
    [backupNumber]    INT           NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [uniqueBackUp] UNIQUE NONCLUSTERED ([institutonID] ASC, [backupNumber] ASC)
);


GO
PRINT N'Creating Table [dbo].[Departments]...';


GO
CREATE TABLE [dbo].[Departments] (
    [Id]             INT          IDENTITY (1, 1) NOT NULL,
    [departmentName] VARCHAR (24) NOT NULL,
    [departmentID]   INT          NOT NULL,
    [departmentType] INT          NOT NULL,
    [institutionID]  VARCHAR (64) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([departmentID] ASC)
);


GO
PRINT N'Creating Table [dbo].[InstitutionEmailDomains]...';


GO
CREATE TABLE [dbo].[InstitutionEmailDomains] (
    [Id]            INT          IDENTITY (1, 1) NOT NULL,
    [institutionID] VARCHAR (64) NOT NULL,
    [emailSuffix]   VARCHAR (64) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[InstitutionsRegistry]...';


GO
CREATE TABLE [dbo].[InstitutionsRegistry] (
    [Id]              INT           IDENTITY (1, 1) NOT NULL,
    [InstitutionID]   VARCHAR (64)  NOT NULL,
    [InstitutionName] VARCHAR (128) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([InstitutionID] ASC),
    UNIQUE NONCLUSTERED ([InstitutionName] ASC)
);


GO
PRINT N'Creating Table [dbo].[SessionDates]...';


GO
CREATE TABLE [dbo].[SessionDates] (
    [Id]            INT          IDENTITY (1, 1) NOT NULL,
    [SessionName]   VARCHAR (24) NOT NULL,
    [sessionID]     INT          NOT NULL,
    [sessionNumber] INT          NOT NULL,
    [sessionYear]   INT          NOT NULL,
    [startDate]     DATE         NOT NULL,
    [endDate]       DATE         NOT NULL,
    [institutonID]  VARCHAR (64) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([sessionID] ASC),
    CONSTRAINT [uniqueSession] UNIQUE NONCLUSTERED ([sessionNumber] ASC, [sessionYear] ASC, [institutonID] ASC)
);


GO
PRINT N'Creating Table [dbo].[SessionTokens]...';


GO
CREATE TABLE [dbo].[SessionTokens] (
    [Id]          INT           IDENTITY (1, 1) NOT NULL,
    [SessionID]   VARCHAR (256) NOT NULL,
    [accountHash] VARCHAR (512) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([SessionID] ASC)
);


GO
PRINT N'Creating Table [dbo].[UserInformation]...';


GO
CREATE TABLE [dbo].[UserInformation] (
    [Id]                   INT           IDENTITY (1, 1) NOT NULL,
    [accountHash]          VARCHAR (512) NOT NULL,
    [firstName]            VARCHAR (64)  NOT NULL,
    [lastName]             VARCHAR (64)  NOT NULL,
    [primaryEmail]         VARCHAR (64)  NOT NULL,
    [primaryInstitutionID] VARCHAR (64)  NOT NULL,
    [accountFlag]          INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([accountHash] ASC)
);


GO
PRINT N'Creating Foreign Key [dbo].[eventAuthorReference]...';


GO
ALTER TABLE [dbo].[apiEvents]
    ADD CONSTRAINT [eventAuthorReference] FOREIGN KEY ([eventAuthorHash]) REFERENCES [dbo].[UserInformation] ([accountHash]);


GO
PRINT N'Creating Foreign Key [dbo].[eventInstitutionReference]...';


GO
ALTER TABLE [dbo].[apiEvents]
    ADD CONSTRAINT [eventInstitutionReference] FOREIGN KEY ([institutonID]) REFERENCES [dbo].[InstitutionsRegistry] ([InstitutionID]);


GO
PRINT N'Creating Foreign Key [dbo].[backupInstitutionReference]...';


GO
ALTER TABLE [dbo].[calendarBookBackUps]
    ADD CONSTRAINT [backupInstitutionReference] FOREIGN KEY ([institutonID]) REFERENCES [dbo].[InstitutionsRegistry] ([InstitutionID]);


GO
PRINT N'Creating Foreign Key [dbo].[DepartmentInstitutionReference]...';


GO
ALTER TABLE [dbo].[Departments]
    ADD CONSTRAINT [DepartmentInstitutionReference] FOREIGN KEY ([institutionID]) REFERENCES [dbo].[InstitutionsRegistry] ([InstitutionID]);


GO
PRINT N'Creating Foreign Key [dbo].[EmailSuffixReferenceToInstitution]...';


GO
ALTER TABLE [dbo].[InstitutionEmailDomains]
    ADD CONSTRAINT [EmailSuffixReferenceToInstitution] FOREIGN KEY ([institutionID]) REFERENCES [dbo].[InstitutionsRegistry] ([InstitutionID]);


GO
PRINT N'Creating Foreign Key [dbo].[InstitutionSessions]...';


GO
ALTER TABLE [dbo].[SessionDates]
    ADD CONSTRAINT [InstitutionSessions] FOREIGN KEY ([institutonID]) REFERENCES [dbo].[InstitutionsRegistry] ([InstitutionID]);


GO
PRINT N'Creating Foreign Key [dbo].[referenceToRealUser]...';


GO
ALTER TABLE [dbo].[SessionTokens]
    ADD CONSTRAINT [referenceToRealUser] FOREIGN KEY ([accountHash]) REFERENCES [dbo].[UserInformation] ([accountHash]);


GO
PRINT N'Creating Foreign Key [dbo].[referenceToInstitution]...';


GO
ALTER TABLE [dbo].[UserInformation]
    ADD CONSTRAINT [referenceToInstitution] FOREIGN KEY ([primaryInstitutionID]) REFERENCES [dbo].[InstitutionsRegistry] ([InstitutionID]);


GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
