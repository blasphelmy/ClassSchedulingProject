@using Newtonsoft.Json
@{
    ViewData["Title"] = ViewData["Title"];
    UserInformation thisUser = new UserInformation();
    List<int> AvailableYears = new List<int>();
    for(int x = 0; x < 4; x++)
    {
        AvailableYears.Add(DateTime.Now.Year + x);
    }
    if(ViewBag.isAuthorized == 1)
    {
        thisUser = ViewBag.thisUser;
    }
}
<style>
</style>
<div id="menuBar">
    <span id="leftGroupingsMenuBar">
    <div id="s1" style="display : none" class="spinner-border spinner-border-sm status sLoading" role="status">
        <span class="sr-only">Loading...</span>
    </div>
        <span id="s2" class="status"></span>
        <span id="rightGroupingSep" class="status">|</span>
        <span id="s3" class="status"></span>
    </span>
    <span class = "scaleContainer" style="position:absolute; right:20px;bottom:0px; width:205px">
        <span class="status scaleLabel" style="position:relative; top: -3px;">Scale :</span> 
        <input class="scaleInput" style="position:relative;width: 150px;top: 2px" type="range" id="viewSizeRangeSlider"  step="1" max="5" min="1" value="4" onchange="renderCalendar()">
    </span>
</div>
<div style="padding-left: 20px; overflow:hidden; max-width: 1900px;">
    <div class="row">
        <div class="col">
            <h2>@thisUser.PrimaryInstitution.InstitutionName</h2>
            <p style="margin-bottom:0">Welcome, @thisUser.FirstName @thisUser.LastName</p>
            <a href="#" onclick="createUserEventListPopUp(caldata.userAccountID)">View all my assigned events</a>
            <p style="margin-bottom: 10px">Your department: @thisUser.Department.DepartmentName, Role : <span id="role"></span></p>
            <div style="margin-bottom: 10px">
                <span>Calendar is :  </span>
                <input id="isActiveToggle" data-off="Active" data-on="Locked" data-onstyle="danger" data-offstyle="primary" type="checkbox" onchange="toggleCalendarState()" data-toggle="toggle" data-size="xs" checked disabled>
            </div>
                <span>
                    <select id="viewStyle" class="custom-select-sm" style="margin-bottom:25px;" onchange="changeView(this)">
                      <option value="1" selected>Calendar</option>
                      <option value="2">List View</option>
                    </select>
                    <select id="dptSel" class="custom-select-sm" style="margin-bottom:25px" onchange="fetchEventTemplates(this)">
                      @foreach(ProgramOfferings program in thisUser.Department.ProgramOfferings){
                        <option value="@program.Id">@program.ProgramName @program.ProgramType</option>
                      }
                    </select>
                    <select id="yearSel" class="custom-select-sm" style="margin-bottom:25px" onchange="fetchNewCalendar(this)">
                      <option selected>Select Year</option>
                        @foreach(int year in AvailableYears)
                        {
                            <option value="@year">@(year-1) - @year</option>
                        }
                    </select>
                    <select id="qSel" class="custom-select-sm" style="margin-bottom:25px" onchange="fetchNewCalendar(this)">
                      <option selected>Select Quarter</option>
                      <option value="1">Fall</option>
                      <option value="2">Winter</option>
                      <option value="3">Spring</option>
                      <option value="4">Summer</option>
                    </select>
                    <select id="building" class="custom-select-sm" style="margin-bottom:25px" onchange="updateRoomsThenFetchNewCalendar(this)">
                      <option selected>Select Building</option>
                      @foreach (Buildings building in thisUser.PrimaryInstitution.Buildings)
                      {
                        <option value="@building.BuildingCode">@building.BuildingCode</option>
                      }
                    </select>
                    <select id="room" class="custom-select-sm" style="margin-bottom:25px" onchange="fetchNewCalendar(this)">
                      <option selected>Select Room</option>
                      <option value="108">108</option>
                      <option value="111">111</option>
                      <option value="112">112</option>
                      <option value="114">114</option>
                    </select>
                </span>
        </div>
    </div>
    <p id="helpPage"></p>
    <div class="row flex-row-reverse" style="padding-right: 20px; padding-bottom: 20px">
        <div id="panel1" class="col-lg-7">
            <div id='calendar'></div>
            <div id='listView' style="display: none" class="table-responsive"></div>
            <br />
        </div>
        <div id="panel2"  class="col-lg-5 listPanel">
            <div class="accordion" id="accordionFilteredEvents">
                <div id="filteredEvents"></div>
            </div>
            <br />
            <div class="accordion" id="accordionEventList">
                <div id="allEvents"></div>
            </div>
            <br />
            <div class="accordion" id="accordionEventemplates">
                <div id="EventTemplates"></div>
            </div>
        </div>
    </div>
</div>
<div id="userEventListPopup">
</div>
<div id="EventWarnings"></div>

<link rel="stylesheet" href="/css/calendarAppDefaults.css" />
<link rel="stylesheet" href="/libCal_f/main.css" />
<script src="/libCal_f/main.js"></script>
<script src="/js/app.js"></script>
<script src="/js/calendar.js"></script>
<script src="/js/popUpRenderer.js"></script>
<script src="/js/createDraggableElement.js"></script>
<script src="/js/appHelpers.js"></script>
<script src="/lib/react/reactDev.js" crossorigin></script>
<script src="/lib/react/reactDomDev.js" crossorigin></script>
<script src="/lib/react/babel7189.js"></script>
<script src="/js/convertTableToCSV.js"></script>
<script>
let caldata = {
    firstName: "@thisUser.FirstName",
    lastName: "@thisUser.LastName",
    userAccountID: "@thisUser.EventsAuthorId",
    userAccountLevel: "@thisUser.AccountFlag",
    UserAssociatedDepartment: "@thisUser.Department.DepartmentName",
    ProgramType: "",
    ProgramName: "",
    EventTemplates: [],
    institutionID: "@thisUser.PrimaryInstitutionId",
}
var _isActive = 1; 
const userAccountID = "@thisUser.EventsAuthorId";
const role = @thisUser.AccountFlag;
const resourceArray = JSON.parse('@Html.Raw(ViewBag.resources)');
var resources = function(){
    let newResourceMap = new Map();
    let newResources = JSON.parse('@Html.Raw(ViewBag.resources)');
    for(let building of newResources){
        newResourceMap.set(building.buildingCode, building.buildingRooms);
    }
    return newResourceMap;
}()
const userList = JSON.parse('@Html.Raw(ViewBag.userList)')
const _theme = @ViewData["theme"];
document.getElementById("role").innerText = function() { 
    switch (role) {
        case 0: return "Web Admin"; break;
        case 1: return "Admin"; break;
        case 2: return "Admin Assistant"; break;
        case 3: return "Professor"; break;
        default: return "NOT REGISTERED"; break;
    }
}();
function toggleCalendarState(){
    if(role > 2) return;
    if(dontAssert) return;
    fetch(`/home/toggleCalendarState?year=${elements.year.val()}&quarter=${elements.quarter.val()}&programID=${Number(elements.dpt.val())}`).then(data => data.json()).then(function(data){
        _isActive = data;
        newCalender = new CalenderApp(caldata);
        fetchData();
    })
} 
</script>
<script src="/js/Components.jsx" type="text/babel"></script>
<script src="/js/main.jsx" type="text/babel"></script>
<script src="/js/helpPage.jsx" type="text/babel"></script>
@if(thisUser.AccountFlag < 3){
    <script>
        function toggleCalendarState(){
            if(role > 2) return;
            if(dontAssert) return;
            fetch(`/home/toggleCalendarState?year=${elements.year.val()}&quarter=${elements.quarter.val()}&programID=${Number(elements.dpt.val())}`).then(data => data.json()).then(function(data){
                _isActive = data;
                newCalender = new CalenderApp(caldata);
                fetchData();
            })
        } 
    </script>
}else{
    <script>
        function toggleCalendarState(){

        } 
    </script>
}